# Binary Tree

class newNode: 
    def __init__(self, data): 
        self.data = data  
        self.left = None
        self.right = None
    
def PreOrder(root): 
    data1=[]
  
    if root: 
  
        # Print the data of node
        print(root.data, end=' ')
        
        # Recur on left child
        PreOrder(root.left)
  
        # Finally recur on right child 
        PreOrder(root.right)
         
        
# Function to merge given two binary trees 
def MergeTrees(tree1, tree2): 
    if not tree1:  
        return tree2  
    if not tree2: 
        return tree1  
    tree1.data += tree2.data  
    tree1.left = MergeTrees(tree1.left, tree2.left)  
    tree1.right = MergeTrees(tree1.right, tree2.right)  
    return tree1 
  
if __name__ == '__main__': 
      
    # First Binary Tree  
    #      2  
    #     / \  
    #    1   3  
    #    \    \
    #     4    7 
    root1 = newNode(2)  
    root1.left = newNode(1)  
    root1.right = newNode(3)   
    root1.left.left = newNode(0)
    root1.left.right = newNode(4)
    root1.right.right= newNode(7)
  
    # Second Binary Tree  
    #     1  
    #    / \  
    #   3  2
    #  /       
    # 5       
    root2 = newNode(1)  
    root2.left = newNode(3)  
    root2.right = newNode(2)  
    root2.left.left = newNode(5)
    root2.left.right = newNode(0)
   
     # Merged Binary Tree  
    #     3  
    #    / \  
    #   4  5
    #  / \  \    
    # 5   4  7
    root = MergeTrees(root1, root2)  
    print("The Merged Binary Tree in Preorder is:")  
    PreOrder(root) 

-------------------------------------------------------------------------------------------------------------------------

#input string
inpt=[7,6,4,3,1]

#buy function that returns the smallest value from the list upto (n-1) values
def buy(inpt):
    box=0
    x=inpt
    for i in range(0, len(inpt)-1):
        for j in range(i+1,len(inpt)):
            if x[i]> x[j]:
                box= x[j]
    return box
#sell function that returns the largest value from the list if available
def sell(inpt):
    box=0
    x=inpt
    for i in range(0, len(inpt)):
        for j in range(i+1,len(inpt)):
            if x[i]< x[j]:
                box= x[j]
    return box
#profit function to find out whether there was a profit or not
def prof(inpt):
    prof= sell(inpt)- buy(inpt)
    if (sell(inpt)- buy(inpt)) >0:
        return prof
    else:
        return 'no profit'

profit=prof(inpt)
#printing the value from profit function
print(profit)   
